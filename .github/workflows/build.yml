name: Build Executables

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            asset_name: wr-cl-linux
          - os: windows-latest
            asset_name: wr-cl-windows.exe
          - os: macos-latest
            asset_name: wr-cl-macos

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install hatch pyinstaller

    - name: Install project
      run: |
        pip install -e '.[build]'
    
    # 创建资源目录并准备图标
    - name: Prepare resources
      shell: bash
      run: |
        mkdir -p resources/icons
        
        # 下载或创建示例图标
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          curl -o resources/icons/icon.ico https://www.python.org/static/favicon.ico
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          curl -o resources/icons/icon.icns https://www.python.org/static/favicon.ico
        fi
    
    - name: Build with PyInstaller
      run: |
        python build.py
      env:
        PYTHONPATH: ${{ github.workspace }}
        PYTHONIOENCODING: utf-8
        PYTHONUTF8: 1

    - name: Get current timestamp
      id: timestamp
      run: |
        echo "timestamp=$(date -u +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
      shell: bash

    - name: Prepare artifact (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        chmod +x dist/wr-cl
        cp config.json.template dist/
        cd dist && tar czf ../${{ matrix.asset_name }}.tar.gz ${{ matrix.asset_name }} config.json.template

    - name: Prepare artifact (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        Copy-Item config.json.template dist\
        Set-Location dist
        tar -czf ..\${{ matrix.asset_name }}.tar.gz ${{ matrix.asset_name }} config.json.template

    - name: Prepare artifact (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        chmod +x dist/wr-cl
        cp config.json.template dist/
        cd dist && tar czf ../${{ matrix.asset_name }}.tar.gz ${{ matrix.asset_name }} config.json.template

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: ${{ matrix.asset_name }}.tar.gz
        retention-days: 7
        compression-level: 9

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true
    
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Get current date
      id: date
      run: echo "DATE=$(date -u +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        files: |
          ./wr-cl-linux.tar.gz
          ./wr-cl-windows.exe.tar.gz
          ./wr-cl-macos.tar.gz
        body: |
          ## Word Document Content Replacer CLI Tool v${{ steps.get_version.outputs.VERSION }}
          
          **Release Date:** ${{ steps.date.outputs.DATE }}
          
          ### Installation
          1. Download the appropriate version for your operating system
          2. Extract the archive:
             ```bash
             # Linux/macOS
             tar xzf wr-cl-*.tar.gz
             
             # Windows (PowerShell)
             tar -xzf wr-cl-windows.exe.tar.gz
             ```
          3. Copy `config.json.template` to `config.json` and modify as needed
          
          ### Usage
          ```bash
          # Show help
          ./wr-cl --help
          
          # Run with config
          ./wr-cl --config config.json
          
          # Run in dry-run mode
          ./wr-cl --config config.json --dry-run
          
          # Set log level
          ./wr-cl --config config.json --log-level debug
          ```
          
          ### System Requirements
          - Windows/macOS/Linux
          - No additional dependencies required (bundled)
          
          ### Build Information
          - Built with Python 3.11
          - PyInstaller bundle
          - Build date: ${{ steps.date.outputs.DATE }}
          - Build commit: ${{ github.sha }}
          
          ### SHA256 Checksums
          ```
          ${{ hashFiles('*.tar.gz') }}
          ```

permissions:
  contents: write
  actions: read