name: Build Executables

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            asset_name: wr-cl-linux
          - os: windows-latest
            asset_name: wr-cl-windows.exe
          - os: macos-latest
            asset_name: wr-cl-macos

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.9.6
      uses: actions/setup-python@v5
      with:
        python-version: 3.9.6
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Build with PyInstaller
      run: |
        python build.py
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Prepare artifact (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        chmod +x dist/wr-cl
        mv dist/wr-cl dist/${{ matrix.asset_name }}
        cp config.json.template dist/config.json.template
        cd dist && tar czf ../${{ matrix.asset_name }}.tar.gz ${{ matrix.asset_name }} config.json.template

    - name: Prepare artifact (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        move dist\wr-cl.exe dist\${{ matrix.asset_name }}
        copy config.json.template dist\config.json.template
        cd dist && tar -czf ..\${{ matrix.asset_name }}.tar.gz ${{ matrix.asset_name }} config.json.template

    - name: Prepare artifact (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        chmod +x dist/wr-cl
        mv dist/wr-cl dist/${{ matrix.asset_name }}
        cp config.json.template dist/config.json.template
        cd dist && tar czf ../${{ matrix.asset_name }}.tar.gz ${{ matrix.asset_name }} config.json.template

    - name: Upload artifact
      uses: actions/upload-artifact@v4  # 更新到 v4 版本
      with:
        name: ${{ matrix.asset_name }}
        path: ${{ matrix.asset_name }}.tar.gz
        retention-days: 7
        compression-level: 9  # 新特性：设置压缩级别

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4  # 更新到 v4 版本
      with:
        merge-multiple: true  # 新特性：合并多个制品
      
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2  # 更新到最新版本
      with:
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        files: |
          ./wr-cl-linux.tar.gz
          ./wr-cl-windows.exe.tar.gz
          ./wr-cl-macos.tar.gz
        body: |
          ## Word Document Content Replacer CLI Tool v${{ github.ref_name }}
          
          ### Release Date
          ${{ github.event.repository.updated_at }}
          
          ### Installation
          1. Download the appropriate version for your operating system
          2. Extract the archive:
             ```bash
             # Linux/macOS
             tar xzf wr-cl-*.tar.gz
             
             # Windows
             tar -xzf wr-cl-windows.exe.tar.gz
             ```
          3. Copy `config.json.template` to `config.json` and modify as needed
          
          ### Usage
          ```bash
          # Show help
          ./wr-cl --help
          
          # Run with config
          ./wr-cl --config config.json
          
          # Run in dry-run mode
          ./wr-cl --config config.json --dry-run
          
          # Set log level
          ./wr-cl --config config.json --log-level debug
          ```
          
          ### System Requirements
          - Windows/macOS/Linux
          - No additional dependencies required (bundled)
          
          ### Changes in this release
          - See commit history for details: ${{ github.event.repository.html_url }}/commits
          
          ### SHA256 Checksums
          ```
          ${{ hashFiles('**/wr-cl-*.tar.gz') }}
          ```

permissions:
  contents: write  # 添加必要的权限声明
  actions: read